============================
Part 4.1

1) for each table's index relationship, add a new table to store this. load info into map-based data structure.

Part 4.2

1) numOfPages: identified avaliable pages to use when doing query processing. using malloc in constructor, reclaim
   memory at deconstructor






/*
btree.cpp

TODO:

7) Testing large insert: causing _depth > 1, rootChange
16) cleaning job before submit to instructor

Done:

X  1) ROOT_EMPTY, left and right node should be connected. other connected is achieved during split
ANS: no need for special case, intialize root to empty _keys, 1 _childs. it would split automatically

X 2) BootNode Split: should reassign parent id to new splitted child, could factor into a method
X 4) rootInsert(): should return failure, if duplicates
X 8) Why ~LeafNode(){} calling dump() would crash testCase9()
It has nothing to do deconstructor itself. Simplified version of dump() in deconstructor works without problem.

X 5) Delete(): ... trikcy, if merge, parent node design merge-with-right or merge-with left.
X 10) Not pass test case 8
X 12) Considering case: same key, different rid: (key1, value1), (key1, value2), is OK, need to handle:

X 13) parentID is not neccessary currently, as no merge/redistribute, just split

X 11) If merge/split is of parent's responsibility, than no need to store parentID.
X 12) when split, detect all same key on the page: return -1 or throw exception

X 14) overflow page: LeafNode::passToOverflow(vector<..> ..); eat, continue
X 15) getNextEntry(): combine overflow page first

X 9) modify root position in page 0 if height changes

*/